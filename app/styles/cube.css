/* Compositions */
.center {
  box-sizing: content-box;
  margin-inline: auto;
  inline-size: 100%;
  max-inline-size: var(--measure);
}
/*
CLUSTER
More info: https://every-layout.dev/layouts/cluster/
A layout that lets you distribute items with consitent
spacing, regardless of their size

CUSTOM PROPERTIES AND CONFIGURATION
--gutter ($global-gutter): This defines the space
between each item.

--cluster-horizontal-alignment (flex-start) How items should align
horizontally. Can be any acceptable flexbox aligmnent value.

--cluster-vertical-alignment How items should align vertically.
Can be any acceptable flexbox alignment value.
*/
.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-size-1);
  gap: var(--gutter, var(--space-size-1));
  justify-content: flex-start;
  justify-content: var(--cluster-horizontal-alignment, flex-start);
  align-items: center;
  align-items: var(--cluster-vertical-alignment, center);
}
.column {
  display: flex;
  flex-direction: column;
  justify-content: center;
  min-height: 100vh;
  min-height: 100dvh;
}
/* 
SIDEBAR
More info: https://every-layout.dev/layouts/sidebar/
A layout that allows you to have a flexible main content area
and a "fixed" width sidebar that sits on the left or right.
If there is not enough viewport space to fit both the sidebar
width *and* the main content minimum width, they will stack
on top of each other

CUSTOM PROPERTIES AND CONFIGURATION
--gutter (var(--space-size-1)): This defines the space
between the sidebar and main content.

--sidebar-target-width (20rem): How large the sidebar should be

--sidebar-content-min-width(50%): The minimum size of the main content area

EXCEPTIONS
.sidebar[data-direction="rtl"]: flips the sidebar to be on the right 
*/
.sidebar {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space-size-1);
  gap: var(--gutter, var(--space-size-1));
}
.sidebar:not([data-direction]) > :first-child {
  flex-basis: 20rem;
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}
.sidebar:not([data-direction]) > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: 50%;
  min-width: var(--sidebar-content-min-width, 50%);
}
/* 
A flipped version where the sidebar is on the right
*/
.sidebar[data-direction="rtl"]
> :last-child {
  flex-basis: 20rem;
  flex-basis: var(--sidebar-target-width, 20rem);
  flex-grow: 1;
}
.sidebar[data-direction="rtl"] > :first-child {
  flex-basis: 0;
  flex-grow: 999;
  min-width: 50%;
  min-width: var(--sidebar-content-min-width, 50%);
}
.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}
.stack > * {
  margin-block: 0;
}
.stack > * + * {
  -webkit-margin-before: 1.5rem;
          margin-block-start: 1.5rem;
  -webkit-margin-before: var(--space, 1.5rem);
          margin-block-start: var(--space, 1.5rem);
}
/*
.cover {
  display: flex;
  flex-direction: column;
  min-block-size: 100vh;
  padding: 1rem;
}

.cover > * {
  margin-block: 1rem;
}

.cover > :first-child:not(div) {
  margin-inline-start: 0;
}

.cover > :last-child:not(div) {
  margin-inline-end: 0;
}

.cover > div {
  margin-block: auto;
}
*/
.switcher {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space);
}
.switcher > * {
  flex-grow: 1;
  flex-basis: calc(( var(--threshold) - 100%) * 999);
}
.switcher > :nth-last-child(n + var(--limit) - 1),
.switcher > :nth-last-child(n + var(--limit) - 1) ~ * {
  flex-basis: 100%;
}
/* Blocks */
.box {
  padding: var(--space-size-1);
  background: var(--color-secondary);
}
/* Utilities */
/* 
FLOW UTILITY
Info: https://piccalil.li/quick-tip/flow-utility/ 
*/
.flow > * + * {
  margin-top: var(--space-size-1);
  margin-top: var(--flow-space, var(--space-size-1));
}
/* 
REGION UTILITY
Consistent block padding for page sections
*/
.region {
  padding-block: var(--space-size-3);
  padding-block: var(--region-space, var(--space-size-3));
}
/* 
VISUALLY HIDDEN UTILITY
Info: https://piccalil.li/quick-tip/visually-hidden/ 
*/
.visually-hidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 0;
  margin: 0;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
  white-space: nowrap;
}
/*
WRAPPER UTILITY
A common wrapper/container
*/
.wrapper {
  margin-inline: auto;
  width: clamp(16rem, 95vw, 85rem);
  padding-inline: var(--space-size-1);
  position: relative;
}
/* Tailwind utilities */
.fixed {
  position: fixed;
}
.inset-0 {
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
.flex {
  display: flex;
}
.flex-wrap {
  flex-wrap: wrap;
}
.gap-xs {
  gap: var(--space-xs);
}
.bg-black {
  --tw-bg-opacity: 1;
  background-color: rgb(0 0 0 / var(--tw-bg-opacity));
}
.opacity-60 {
  opacity: 0.6;
}
.filter {
  filter: var(--tw-blur) var(--tw-brightness) var(--tw-contrast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-saturate) var(--tw-sepia) var(--tw-drop-shadow);
}
